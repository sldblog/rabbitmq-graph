#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
$LOAD_PATH.unshift(Bundler.root) unless $LOAD_PATH.include?(Bundler.root)

require 'json'
require 'optparse'
require 'app/discover'
require 'app/dot_format'

options = {
  topology: {},
  discover: {
    api_url: ENV['RABBITMQ_API_URI'] || 'http://guest:guest@localhost:15672/'
  },
  format: {
    show_entities: ENV['SHOW_ENTITIES'] == 'true' || true,
    label_detail: ENV['LABEL_DETAIL'] || 'actions'
  }
}
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on('-uURL', '--url=URL', 'RabbitMQ management API URL. ' \
          'Defaults to "http://guest:guest@localhost:15672/". ' \
          'Also configurable through the "RABBITMQ_API_URI" environment variable.') do |url|
    options[:discover][:api_url] = url
  end
  opts.on('-a', '--applications-only', 'Creates a graph without entity nodes.') do |apps_only|
    options[:format][:show_entities] = !apps_only
  end
  opts.on('-lDETAILS', '--label-detail=DETAILS', 'Specifies edge label format. ' \
          'Comma separated list of "queue_name", "entity", "actions"') do |label_detail|
    options[:format][:label_detail] = label_detail.to_s
  end
  opts.on('--read-topology=FILE', 'Skip discovery and use a stored topology file.') do |file|
    options[:topology][:read_file] = file
  end
  opts.on('--save-topology=FILE', 'After discovery save the topology to the given file.') do |file|
    options[:topology][:save_file] = file
  end
  opts.on('-h', '--help', 'Prints this help.') do
    puts opts
    exit
  end
end.parse!

topology = if (read_file = options[:topology][:read_file])
             JSON.parse(IO.read(read_file), symbolize_names: true).map { |route_hash| Route.new(route_hash) }
           else
             result = Discover.new(api_url: options[:discover][:api_url]).topology
             if (save_file = options[:topology][:save_file])
               output = "[\n  " + result.map { |e| JSON.generate(e.to_h) }.join(",\n  ") + "\n]\n"
               IO.write(save_file, output)
             end
             result
           end

label_detail = options[:format][:label_detail].split(',').map(&:strip).reject(&:empty?).map(&:to_sym)
puts DotFormat.new(
  topology: topology,
  show_entities: options[:format][:show_entities],
  label_detail: label_detail
).present
